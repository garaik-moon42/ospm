/*
 * Base${naming.getClassName($classname)}Filter.java
 *
 * This is a generated file.
 */

// The package name
#if ($package)
package ${package};
#end

#import("com.p92.sofia.oms.OMCriteria" $imports)
#import("com.p92.sofia.oms.OMObject" $imports)
#import("com.p92.sofia.oms.OMSException" $imports)
#import("com.p92.sofia.pfw.SofiaWebApplication" $imports)
#import("java.util.Iterator" $imports)
#import("java.util.*" $imports)
#import("org.apache.log4j.Logger" $imports)

// Generated import statements
#foreach ($import in $imports)
import ${import};
#end

/**
 * This class is an filter of ${classname} beans.
 *
 * Generated by SOFIA code generator on ${date}.
 */
public class Base${classname}Filter
{
    /** Logger. */
    private static final Logger log4j = Logger.getLogger(${classname}Filter.class);
    /** The maximum of items per page. */
    public static final int ITEMS_PER_PAGE = $properties.getInt("generator.list.itemperpage", 10);

#set($initOrderBy = "true")
#foreach ($attribute in $attributes)
#if ($attribute.getParameter("orderable") == "yes" && $initOrderBy == "true")
    protected String orderBy = "$attribute.name";
#set($initOrderBy = "false")
#end
#end
#if ($initOrderBy == "true")
    protected String orderBy = "";
#end
    protected int direction = 1;
    protected int page = 1;
    protected int numberOfHits = 0;
    protected boolean refreshPage = false;

    // filter locale
    protected Locale locale;

    // filter attributes
#foreach ($attribute in $attributes)
#if($attribute.getParameter("filterable") == "yes")
#if($attribute.getParameter("filterLook") == "textrange" || $attribute.getParameter("filterLook") == "pickrange")
#if($attribute.type == "integer" || $attribute.type == "float" || $attribute.type == "date" || $attribute.type == "datetime" || $attribute.type == "time" || $attribute.type == "shorttext" || $attribute.type == "text")
    protected ${attribute.javaClass} ${attribute.name}RangeBottom;
    protected ${attribute.javaClass} ${attribute.name}RangeTop;
#end
#elseif($attribute.getParameter("filterLook") == "multipick")
#if($attribute.type == "reference")
#if($attribute.getParameter("omClass"))
    protected List ${attribute.name}Ids;
#else
    // todo: The 'omClass' prameter is not specified the $attribute.name reference attribute.
#end
#end
#else
#if($attribute.type == "reference")
#if($attribute.getParameter("omClass"))
    protected String ${attribute.name}Id;
#else
    // todo: The 'omClass' prameter is not specified the $attribute.name reference attribute.
#end
#else
    protected ${attribute.javaClass} ${attribute.name};
#end
#end
#end
#end

    /** Creates a new empty instance of Base${classname}Filter. */
    public Base${classname}Filter() {
    }

    /**
     * Initalizes the filter.
     */
    public static void init(SofiaWebApplication application) {
        ${classname}.init(application);
    }

    /**
     * Gives back the current locale of the bean.
     * @return Current locale of the bean.
     */
    public Locale getLocale() {
        return locale;
    }

    /**
     * Gives back the direction indicator value.
     * @return return int value 1:ASC -1:DESC.
     */
    public int getDirection() {
        return direction;
    }

    /**
     * Gives back number of last page.
     * @return int number of last page.
     */
    public int getLastPage() {
        return ((numberOfHits % ITEMS_PER_PAGE) == 0)? (numberOfHits / ITEMS_PER_PAGE): (numberOfHits / ITEMS_PER_PAGE + 1);
    }

    /**
     * Gives back the name of ordering attribute.
     * @return String name of ordering attribute.
     */
    public String getOrderBy() {
        return orderBy;
    }

    /**
     * Gives back the number of displayed page.
     * @return int number of displayed page.
     */
    public int getPage() {
        if (refreshPage) {
            setPage(1);
            refreshPage = false;
        }
        return page;
    }

    /*
     * Gives back the number of hits .
     * @return int nuber of hits.
     */
    public int getNumberOfHits() {
        return numberOfHits;
    }

##
## GETTER METHODS OF FILTERABLE ATTRIBUTES
##
#foreach ($attribute in $attributes)
#if($attribute.getParameter("filterable") == "yes")
#if($attribute.getParameter("filterLook") == "textrange" || $attribute.getParameter("filterLook") == "pickrange")
#if($attribute.type == "integer" || $attribute.type == "float" || $attribute.type == "date" || $attribute.type == "datetime" || $attribute.type == "time")

    /**
     * Gives back the value of bottom value of ${attribute.name}.
     *
     * @return String value of bottom value of ${attribute.name}.
     */
    public String get${naming.getAttributeMethod($attribute.name)}RangeBottomAsString() {
        if (${attribute.name}RangeBottom == null) return "";
#if ($attribute.type == "integer")
        return ${attribute.name}RangeBottom.toString();
#elseif ($attribute.type == "float")
        return ${classname}.${attribute.name}Format.format(${attribute.name}RangeBottom);
#elseif ($attribute.type == "date")
        return ${classname}.application.getDateFormat(locale).format(${attribute.name}RangeBottom);
#elseif ($attribute.type == "time")
        return ${classname}.application.getTimeFormat(locale).format(${attribute.name}RangeBottom);
#elseif ($attribute.type == "datetime")
        return ${classname}.application.getDateTimeFormat(locale).format(${attribute.name}RangeBottom);
#end
    }

    /**
     * Gives back the value of top value of ${attribute.name}.
     *
     * @return String value of top value of ${attribute.name}.
     */
    public String get${naming.getAttributeMethod($attribute.name)}RangeTopAsString() {
        if (${attribute.name}RangeTop == null) return "";
#if ($attribute.type == "integer")
        return ${attribute.name}RangeTop.toString();
#elseif ($attribute.type == "float")
        return ${classname}.${attribute.name}Format.format(${attribute.name}RangeTop);
#elseif ($attribute.type == "date")
        return ${classname}.application.getDateFormat(locale).format(${attribute.name}RangeTop);
#elseif ($attribute.type == "time")
        return ${classname}.application.getTimeFormat(locale).format(${attribute.name}RangeTop);
#elseif ($attribute.type == "datetime")
        return ${classname}.application.getDateTimeFormat(locale).format(${attribute.name}RangeTop);
#end
    }
#else
     // todo: The $attribute.getParameter("filterLook") filter look of $attribute.name attribute is unsupported yet.
#end
#elseif($attribute.getParameter("filterLook") == "multipick")
#if($attribute.type == "reference")
#if($attribute.getParameter("omClass"))

    /**
     * Gives back the id list of $attribute.name objects.
     *
     * @return List ids.
     */
    public List get${naming.getAttributeMethod($attribute.name)}IdsAsList() {
        return ${attribute.name}Ids;
    }
#else
    // todo: The 'omClass' prameter is not specified the $attribute.name reference attribute.
#end
#else
     // todo: the 'multipick' filter look support only the 'referece' attribute type
#end
#else
#if($attribute.type == "reference")
#if($attribute.getParameter("omClass"))

    /**
     * Gives back ${attribute.getParameter("omClass")} object.
     *
     * @return ${attribute.getParameter("omClass")} object.
     */
    public ${attribute.getParameter("omClass")} get${naming.getAttributeMethod($attribute.name)}() {
        if (${attribute.name}Id == null || "".equals(${attribute.name}Id)) return null;
        OMObject object = ${attribute.getParameter("omClass")}.omClass.getOMObjectById(${attribute.name}Id);
        if (object == null) return null;
        return new ${attribute.getParameter("omClass")}(object);
    }

    /**
     * Gives back the id of $attribute.name object.
     *
     * @return String id.
     */
    public String get${naming.getAttributeMethod($attribute.name)}IdAsString() {
        if (${attribute.name}Id == null) return "";
        return ${attribute.name}Id;
    }
#else
    // todo: The 'omClass' prameter is not specified the $attribute.name reference attribute.
#end
#else

    /**
     * Gives back the value of $attribute.name.
     *
     * @return String value of $attribute.name.
     */
    public String get${naming.getAttributeMethod($attribute.name)}AsString() {
        if ($attribute.name == null) return "";
#if ($attribute.type == "integer")
        return ${attribute.name}.toString();
#elseif ($attribute.type == "float")
        return ${classname}.${attribute.name}Format.format($attribute.name);
#elseif ($attribute.type == "boolean")
        return ${attribute.name}.toString();
#elseif ($attribute.type == "date")
        return ${classname}.application.getDateFormat(locale).format($attribute.name);
#elseif ($attribute.type == "time")
        return ${classname}.application.getTimeFormat(locale).format($attribute.name);
#elseif ($attribute.type == "datetime")
        return ${classname}.application.getDateTimeFormat(locale).format($attribute.name);
#elseif ($attribute.type == "shorttext" || $attribute.type == "text")
        return $attribute.name;
#end
    }
#end
#end
#end
#end


    /**
     * Sets the current locale of the bean.
     * @param locale New locale of the bean.
     */
    public void setLocale(Locale locale) {
        this.locale = locale;
    }

    /**
     * Sets the direction.
     * @param direction int value. If it is positive then direction is ASC, else DESC.
     */
    public void setDirection(int direction) {
        if(((direction > 0)? 1: -1) != this.direction) changedFilter();
        this.direction = (direction > 0)? 1: -1;
    }

    /**
     * Sets name of ordering attribute
     * @param orderBy String name of ordering attribute.
     */
    public void setOrderBy(String orderBy) {
        if ((this.orderBy == null && orderBy!= null) || (this.orderBy != null && !this.orderBy.equals(orderBy))) changedFilter();
        this.orderBy = orderBy;
    }

    /**
     * Sets the number of displayable page.
     * @param page int number of displayable page.
     */
    public void setPage(int page) {
        this.page = Math.max(1,Math.min(getLastPage(),page));
    }

    /*
     * Sets the number of hits value.
     * @param numberOfHits new value.
     */
    protected void setNumberOfHits(int numberOfHits) {
        this.numberOfHits = numberOfHits;
    }

##
## SETTER METHODS OF FILTERABLE ATTRIBUTES
#foreach ($attribute in $attributes)
#if($attribute.getParameter("filterable") == "yes")
#if($attribute.getParameter("filterLook") == "textrange" || $attribute.getParameter("filterLook") == "pickrange")
#if($attribute.type == "integer" || $attribute.type == "float" || $attribute.type == "date" || $attribute.type == "datetime" || $attribute.type == "time")
     /**
      * Sets the bottom String value of $attribute.name.
      *
      * @param ${attribute.name}RangeBottom String bottom value of $attribute.name.
      */
     public void set${naming.getAttributeMethod($attribute.name)}RangeBottom(String ${attribute.name}RangeBottom) {
#if ($attribute.type == "integer")
         try {
             this.${attribute.name}RangeBottom = new Integer(Integer.parseInt(${attribute.name}RangeBottom));
         } catch (Exception e) {
             this.${attribute.name}RangeBottom = null;
         }
#elseif ($attribute.type == "float")
         try {
             this.${attribute.name}RangeBottom = new Float(${classname}.${attribute.name}Format.parse(${attribute.name}RangeBottom).floatValue());
         } catch (Exception e) {
             this.${attribute.name}RangeBottom = null;
         }
#elseif ($attribute.type == "date")
         try {
             this.${attribute.name}RangeBottom = ${classname}.application.getDateFormat(locale).parse(${attribute.name}RangeBottom);
         } catch (Exception e) {
             this.${attribute.name}RangeBottom = null;
         }
#elseif ($attribute.type == "datetime")
         try {
             this.${attribute.name}RangeBottom = ${classname}.application.getDateTimeFormat(locale).parse(${attribute.name}RangeBottom);
         } catch (Exception e) {
             this.${attribute.name}RangeBottom = null;
         }
#elseif ($attribute.type == "time")
         try {
             this.${attribute.name}RangeBottom = ${classname}.application.getTimeFormat(locale).parse(${attribute.name}RangeBottom);
         } catch (Exception e) {
             this.${attribute.name}RangeBottom = null;
         }
#end
     }

     /**
      * Sets the top String value of $attribute.name.
      *
      * @param ${attribute.name}RangeTop String top value of $attribute.name.
      */
     public void set${naming.getAttributeMethod($attribute.name)}RangeTop(String ${attribute.name}RangeTop) {
#if ($attribute.type == "integer")
         try {
             this.${attribute.name}RangeTop = new Integer(Integer.parseInt(${attribute.name}RangeTop));
         } catch (Exception e) {
             this.${attribute.name}RangeTop = null;
         }
#elseif ($attribute.type == "float")
         try {
             this.${attribute.name}RangeTop = new Float(${classname}.${attribute.name}Format.parse(${attribute.name}RangeTop).floatValue());
         } catch (Exception e) {
             this.${attribute.name}RangeTop = null;
         }
#elseif ($attribute.type == "date")
         try {
             this.${attribute.name}RangeTop = ${classname}.application.getDateFormat(locale).parse(${attribute.name}RangeTop);
         } catch (Exception e) {
             this.${attribute.name}RangeTop = null;
         }
#elseif ($attribute.type == "datetime")
         try {
             this.${attribute.name}RangeTop = ${classname}.application.getDateTimeFormat(locale).parse(${attribute.name}RangeTop);
         } catch (Exception e) {
             this.${attribute.name}RangeTop = null;
         }
#elseif ($attribute.type == "time")
         try {
             this.${attribute.name}RangeTop = ${classname}.application.getTimeFormat(locale).parse(${attribute.name}RangeTop);
         } catch (Exception e) {
             this.${attribute.name}RangeTop = null;
         }
#end
     }
#else
     // todo: The $attribute.getParameter("filterLook") filter look of $attribute.name attribute is unsupported yet.
#end
#elseif($attribute.getParameter("filterLook") == "multipick")
#if($attribute.type == "reference")
#if($attribute.getParameter("omClass"))

    /**
     * Sets the String value of $attribute.name.
     *
     * @param ${attribute.name}Ids String value of $attribute.name.
     */
    public void set${naming.getAttributeMethod($attribute.name)}Ids(String[] ${attribute.name}Ids) {
        if(${attribute.name}Ids == null ${attribute.name}Ids.length == 0) {
            this.${attribute.name}Ids == null;
        } else {
            this.${attribute.name}Ids = new ArrayList(${attribute.name}Ids);
        }
    }
#else
    // todo: The 'omClass' prameter is not specified the $attribute.name reference attribute.
#end
#else
     // todo: the 'multipick' filter look support only the 'referece' attribute type
#end
#else
#if($attribute.type == "reference")
#if($attribute.getParameter("omClass"))

    /**
     * Sets the String value of $attribute.name.
     *
     * @param ${attribute.name}Id String value of $attribute.name.
     */
    public void set${naming.getAttributeMethod($attribute.name)}Id(String ${attribute.name}Id) {
        this.${attribute.name}Id = ${attribute.name}Id;
    }
#else
    // todo: The 'omClass' prameter is not specified the $attribute.name reference attribute.
#end
#elseif($attribute.type == "integer" || $attribute.type == "float" || $attribute.type == "boolean" || $attribute.type == "date" || $attribute.type == "datetime" || $attribute.type == "time" || $attribute.type == "shorttext" || $attribute.type == "text")

    /**
     * Sets the String value of $attribute.name.
     *
     * @param $attribute.name String value of $attribute.name.
     */
    public void set${naming.getAttributeMethod($attribute.name)}(String $attribute.name) {
#if ($attribute.type == "integer")
        try {
            this.$attribute.name = new Integer(Integer.parseInt($attribute.name));
        } catch (Exception e) {
            this.$attribute.name = null;
        }
#elseif ($attribute.type == "float")
        try {
            this.$attribute.name = new Float(${classname}.${attribute.name}Format.parse($attribute.name).floatValue());
        } catch (Exception e) {
            this.$attribute.name = null;
        }
#elseif ($attribute.type == "boolean")
        if ("true".equalsIgnoreCase($attribute.name))
            this.$attribute.name = new Boolean(true);
        else if ("false".equalsIgnoreCase($attribute.name))
            this.$attribute.name = new Boolean(false);
        else
            this.$attribute.name = null;
#elseif ($attribute.type == "date")
        try {
            this.$attribute.name = ${classname}.application.getDateFormat(locale).parse($attribute.name);
        } catch (Exception e) {
            this.$attribute.name = null;
        }
#elseif ($attribute.type == "datetime")
        try {
            this.$attribute.name = ${classname}.application.getDateTimeFormat(locale).parse($attribute.name);
        } catch (Exception e) {
            this.$attribute.name = null;
        }
#elseif ($attribute.type == "time")
        try {
            this.$attribute.name = ${classname}.application.getTimeFormat(locale).parse($attribute.name);
        } catch (Exception e) {
            this.$attribute.name = null;
        }
#elseif ($attribute.type == "shorttext" || $attribute.type == "text")
        this.$attribute.name = $attribute.name;
#end
    }
#else

    // todo: The '$attribute.type' type in unsupported.

#end
#end
#end
#end


    /**
     * Creates and gives back a criteria according to the inner state of filter.
     * @param ignorePaging If <code>true</code> then ignores paging.
     * @return OMCriteria instance.
     */
    public OMCriteria getCriteria(boolean ignorePaging) {
        OMCriteria crit = ${classname}.application.getOMS().createCriteria();
#foreach ($attribute in $attributes)
#if ($attribute.getParameter("filterable") == "yes")
#if($attribute.getParameter("filterLook") == "textrange")
#if ($attribute.type == "date" || $attribute.type == "time" || $attribute.type == "datetime" || $attribute.type == "float" || $attribute.type == "integer")
#if ($attribute.isMultilingual())
        if (${attribute.name}RangeBottom != null)
            crit.add(${classname}.attr${naming.getAttributeMethod($attribute.name)}, locale, ">=", ${attribute.name}RangeBottom);
        if (${attribute.name}RangeTop != null)
            crit.add(${classname}.attr${naming.getAttributeMethod($attribute.name)}, locale, "<=", ${attribute.name}RangeTop);
#else
        if (${attribute.name}RangeBottom != null)
            crit.add(${classname}.attr${naming.getAttributeMethod($attribute.name)}, null, ">=", ${attribute.name}RangeBottom);
        if (${attribute.name}RangeTop != null)
            crit.add(${classname}.attr${naming.getAttributeMethod($attribute.name)}, null, "<=", ${attribute.name}RangeTop);
#end
#else
        // todo: The $attribute.type type attribute not support $attribute.getParameter("filterLook") filter look.
#end
#elseif($attribute.getParameter("filterLook") == "pickrange")
#if ($attribute.type == "date" || $attribute.type == "time" || $attribute.type == "datetime")
#if ($attribute.isMultilingual())
        if (${attribute.name}RangeBottom != null)
            crit.add(${classname}.attr${naming.getAttributeMethod($attribute.name)}, locale, ">=", ${attribute.name}RangeBottom);
        if (${attribute.name}RangeTop != null)
            crit.add(${classname}.attr${naming.getAttributeMethod($attribute.name)}, locale, "<=", ${attribute.name}RangeTop);
#else
        if (${attribute.name}RangeBottom != null)
            crit.add(${classname}.attr${naming.getAttributeMethod($attribute.name)}, null, ">=", ${attribute.name}RangeBottom);
        if (${attribute.name}RangeTop != null)
            crit.add(${classname}.attr${naming.getAttributeMethod($attribute.name)}, null, "<=", ${attribute.name}RangeTop);
#end
#else
        // todo: The $attribute.type type attribute not support $attribute.getParameter("filterLook") filter look.
#end
#elseif($attribute.getParameter("filterLook") == "pick")
#if($attribute.type == "reference")
#if($attribute.getParameter("omClass"))
        if (${attribute.name}Id != null && !"".equals(${attribute.name}Id))
#if ($attribute.isMultilingual())
            crit.addNative(${classname}.attr${naming.getAttributeMethod($attribute.name)}, locale, "=", "'" + ${attribute.name}Id + "'");
#else
            crit.addNative(${classname}.attr${naming.getAttributeMethod($attribute.name)}, null, "=", "'" + ${attribute.name}Id + "'");
#end
#else
    // todo: The 'omClass' prameter is not specified the $attribute.name reference attribute.
#end
#else
        // todo: The $attribute.type type attribute not support $attribute.getParameter("filterLook") filter look.
 #end
#elseif($attribute.getParameter("filterLook") == "select")
#if($attribute.type == "reference")
#if($attribute.getParameter("omClass"))
        if (${attribute.name}Id != null && !"".equals(${attribute.name}Id))
#if ($attribute.isMultilingual())
            crit.addNative(${classname}.attr${naming.getAttributeMethod($attribute.name)}, locale, "=", "'" + ${attribute.name}Id + "'");
#else
            crit.addNative(${classname}.attr${naming.getAttributeMethod($attribute.name)}, null, "=", "'" + ${attribute.name}Id + "'");
#end
#else
    // todo: The 'omClass' prameter is not specified the $attribute.name reference attribute.
#end
#elseif ($attribute.type == "date" || $attribute.type == "time" || $attribute.type == "datetime" || $attribute.type == "float" || $attribute.type == "integer")
        if ($attribute.name != null)
#if ($attribute.isMultilingual())
            crit.add(${classname}.attr${naming.getAttributeMethod($attribute.name)}, locale, "=", $attribute.name);
#else
            crit.add(${classname}.attr${naming.getAttributeMethod($attribute.name)}, null, "=", $attribute.name);
#end
#else
        // todo: The $attribute.type type attribute not support $attribute.getParameter("filterLook") filter look.
#end
#else
#if ($attribute.type == "boolean")
        if ($attribute.name != null)
#if ($attribute.isMultilingual())
            crit.addNative(${classname}.attr${naming.getAttributeMethod($attribute.name)}, locale, "=", ${attribute.name}.toString());
#else
            crit.addNative(${classname}.attr${naming.getAttributeMethod($attribute.name)}, null, "=", ${attribute.name}.toString());
#end
#elseif ($attribute.type == "date" || $attribute.type == "time" || $attribute.type == "datetime" || $attribute.type == "float" || $attribute.type == "integer")
        if ($attribute.name != null)
#if ($attribute.isMultilingual())
            crit.add(${classname}.attr${naming.getAttributeMethod($attribute.name)}, locale, "=", $attribute.name);
#else
            crit.add(${classname}.attr${naming.getAttributeMethod($attribute.name)}, null, "=", $attribute.name);
#end
#elseif ($attribute.type == "shorttext" || $attribute.type == "text")
        if ($attribute.name != null && !"".equals($attribute.name))
#if ($attribute.isMultilingual())
            crit.add(${classname}.attr${naming.getAttributeMethod($attribute.name)}, locale, "like", "%" + $attribute.name + "%");
#else
            crit.add(${classname}.attr${naming.getAttributeMethod($attribute.name)}, null, "like", "%" + $attribute.name + "%");
#end
#else
        // todo:  Unsupported input type.
#end
#end
#end
#end

#foreach ($attribute in $attributes)
#if ($attribute.getParameter("orderable") == "yes")
#if ($attribute.isMultilingual())

        if ("$attribute.name".equals(orderBy)) {
            crit.setOrderBy(${classname}.attr${naming.getAttributeMethod($attribute.name)});
            crit.setOrderLocale(locale);
        }
#else

        if ("$attribute.name".equals(orderBy)) {
            crit.setOrderBy(${classname}.attr${naming.getAttributeMethod($attribute.name)});
        }
#end
#end
#end

        crit.setOrderDirection(direction);

        if (!ignorePaging) {
            crit.setLimit(ITEMS_PER_PAGE);
            crit.setOffset(ITEMS_PER_PAGE * (getPage() - 1));
        }

        return crit;
    }

    /**
     * Gives back list of filtered ${naming.getAttributeMethod($classname)} beans.
     * @return List of beans.
     */
    public List getItems () {
        return getHits(false);
    }

    /**
     * Gives back list of filtered ${naming.getAttributeMethod($classname)} beans.
     * @param ignorePaging If <code>true</code> then ignores paging.
     * @return List of beans.
     */
    public List getHits(boolean ignorePaging) {
        OMCriteria crit = getCriteria(ignorePaging);
        try {
            setNumberOfHits(${naming.getAttributeMethod($classname)}.omClass.countOMObjects(crit));
        }
        catch (OMSException e) {
            log4j.error("Unable to count number of hits.", e);
        }
        List omItems = ${naming.getAttributeMethod($classname)}.omClass.searchOMObjects(crit);
        // wrapping
        List items = new ArrayList(omItems.size());
        for (Iterator i = omItems.iterator(); i.hasNext();) {
            OMObject om${naming.getAttributeMethod($classname)} = (OMObject) i.next();
            ${naming.getAttributeMethod($classname)} ${classname} = new ${naming.getAttributeMethod($classname)}(om${naming.getAttributeMethod($classname)});
            ${classname}.setLocale(locale);
            items.add(${classname});
        }
        return items;
    }

    /**
     * This method called if the filter changed.
     */
    public void changedFilter() {
        refreshPage = true;
    }

    /**
     * This method gives back true if items list has more page.
     * @return boolean
     */
    public boolean isMorePage() {
        return (getNumberOfHits() > ITEMS_PER_PAGE);
    }
##
## LABEL GETTER METHODS
##
#foreach ($attribute in $attributes)
#if ($attribute.type == "integer" || $attribute.type == "float" || $attribute.type == "boolean" || $attribute.type == "date" || $attribute.type == "datetime" || $attribute.type == "time" || $attribute.type == "shorttext" || $attribute.type == "text" || $attribute.type == "reference")
#if ($attribute.getParameter("filterable") == "yes" || $attribute.getParameter("orderable") == "yes")

    /**
     * Gives back the label of the '$attribute.name' filter attribute in the current locale.
     * @return Label of the attribute in the current locale.
     */
    public static String label${naming.getAttributeMethod($attribute.name)}(Locale locale) {
        return ${classname}.attr${naming.getAttributeMethod($attribute.name)}.getLabel().getLabel(locale);
    }
#if($attribute.getParameter("filterLook") == "textrange" || $attribute.getParameter("filterLook") == "pickrange")
#if($attribute.type == "integer" || $attribute.type == "float" || $attribute.type == "date" || $attribute.type == "datetime" || $attribute.type == "time" || $attribute.type == "shorttext" || $attribute.type == "text")

    /**
     * Gives back the bottom label of the '$attribute.name' filter attribute in the current locale.
     * @return Label in the current locale.
     */
    public static String label${naming.getAttributeMethod($attribute.name)}RangeBottom(Locale locale) {
        try {
            return ${classname}.application.getLMS().getLabel("label${naming.getAttributeMethod($attribute.name)}RangeBottom").getLabel(locale);
        } catch (Exception e) {
            return null;
        }
    }

    /**
     * Gives back the top label of the '$attribute.name' filter attribute in the current locale.
     * @return Label in the current locale.
     */
    public static String label${naming.getAttributeMethod($attribute.name)}RangeTop(Locale locale) {
        try {
            return ${classname}.application.getLMS().getLabel("label${naming.getAttributeMethod($attribute.name)}RangeTop").getLabel(locale);
        } catch (Exception e) {
            return null;
        }
    }
#end
#end
#end
#end
#end
}
