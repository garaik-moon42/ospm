#if ($package)
package ${package};
#end

#import("com.p92.sofia.pfw.operation.Operation" $imports)
#import("com.p92.sofia.pfw.SofiaWebApplication" $imports)
#import("com.p92.sofia.pfw.error.ErrorMessage" $imports)
#import("com.p92.sofia.oms.OMSException" $imports)
#import("com.p92.sofia.oms.mtoms.MTOMS" $imports)
#import("com.arvato.common.properties.Properties" $imports)

#import("javax.servlet.http.HttpServletRequest" $imports)
#import("javax.servlet.http.HttpSession" $imports)

#import("org.apache.log4j.Logger" $imports)

#import("com.p92.sofiamodule.pm3.bean.$classname" $imports)

/**
 * Delete operation class for $classname bean.
 * Generated by SOFIA code generator on ${date}.
 */
public class ${classname}DeleteOperation implements Operation {
    /** Edited instance in session as an attribute. */
    public static final String SESSION_ATTR_INSTANCE = "instanceOf${classname}Properties";
    /** Request parameter name prefix for $classname attributes. */
    public static final String REQUEST_PARAM_PREFIX_$naming.formatConstant($classname) = "$naming.formatAttribute($classname)";
    /** Saving error label name. */
    public static final String ERROR_UNABLE_DELETE_$naming.formatConstant($classname) = "errorUnableDelete${classname}";
    /** Logger. */
    private static final Logger log4j = Logger.getLogger(${classname}DeleteOperation.class);
    /** ${classname} bean. */
    protected ${classname} $naming.formatAttribute($classname);
    /** Errormessage instance. */
    protected ErrorMessage errorMessage;
    /** Session instance. */
    protected HttpSession session;
    /** MTOMS instance. */
    protected MTOMS mtoms;

    /**
     * Sets the operation parameteres from the request.
     *
     * @param application SOFIA Web Application instance.
     * @param properties  Properties defined in configuration file for this operation.
     * @param request     HTTP request.
     */
    public void init(SofiaWebApplication application, Properties properties, HttpServletRequest request) {
        mtoms = (MTOMS) application.getOMS();

        session = request.getSession();

        $naming.formatAttribute($classname) = (${classname}) session.getAttribute(SESSION_ATTR_INSTANCE);
        if ($naming.formatAttribute($classname) == null) {
            throw new IllegalStateException("Did not get '$classname' bean instance from the session.");
        }
        errorMessage = new ErrorMessage(application);
    }

    /**
     * This method is called right before the instance is deleted.
     */
    protected void beforeDelete() {
    }

    /**
     * This method is called right after the instance is deleted.
     */
    protected void afterDelete() {
    }

    /**
     * Performs the operation.
     *
     * @return Result 'code' as an object. It makes possible to return any sophisticated result.
     */
    public Object perform() {
        if (!errorMessage.hasAny()) {
            try {
                mtoms.startTransaction();
                beforeDelete();
                ${naming.formatAttribute($classname)}.delete();
                afterDelete();
                mtoms.commit();
            }
            catch (OMSException e) {
                log4j.error("Unable to save project.", e);
                errorMessage.addGeneral(ERROR_UNABLE_DELETE_$naming.formatConstant($classname));
                try {
                    mtoms.rollback();
                }
                catch (OMSException omse) {
                    log4j.error("Unable to rollback.", omse);
                }
            }
        }
        return errorMessage;
    }
}
