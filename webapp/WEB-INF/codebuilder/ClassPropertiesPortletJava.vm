#if ($package)
package ${package};
#end

#import("com.p92.sofia.pfw.error.ErrorMessage" $imports)
#import("com.p92.sofia.pfw.request.RequestHelper" $imports)
#import("com.p92.sofia.pfw.PFWConstants" $imports)
#import("com.p92.sofia.pfw.SofiaLink" $imports)
#import ("com.p92.sofia.pfw.gateway.HistoryHelper" $imports)
#import ("com.p92.sofia.pfw.gateway.HistoryGateway" $imports)
#import("com.p92.sofia.pfw.velocity.VelocityPortlet" $imports)
#import("com.p92.sofia.oms.tool.OMObjectFormatter" $imports)
import com.p92.sofia.oms.OMSException;
import com.p92.sofia.oms.OMObject;
import org.apache.log4j.Logger;

#import("javax.servlet.http.HttpServletRequest" $imports)
#import("javax.servlet.http.HttpSession" $imports)

#import("org.apache.velocity.VelocityContext" $imports)

#import("com.p92.sofiamodule.pm3.bean.*" $imports)

#import("java.util.*" $imports)

/**
 * $classname properties portlet class.
 * Generated by SOFIA code generator on ${date}.
 */
public class ${classname}PropertiesPortlet extends VelocityPortlet {
    /** Logger. */
    private static final Logger log4j = Logger.getLogger(${classname}PropertiesPortlet.class);
    /** Edited instance in session as an attribute. */
    public static final String SESSION_ATTR_INSTANCE = "instanceOf${classname}Properties";
    /** Request parameter name prefix for $classname attributes. */
    public static final String REQUEST_PARAM_PREFIX_$naming.formatConstant($classname) = "$naming.formatAttribute($classname)";
    /** Bean updating request parameter (If it is not empty, then the portlet updates the bean). */
    public static final String REQUEST_PARAM_UPDATE_FORM = "updateForm";
    /** Bean saving operation name. */
    public static final String OPERATION_${naming.formatConstant($classname)}_SAVE = "$naming.formatAttribute($classname)Save";
    /** Bean deleting operation name. */
    public static final String OPERATION_${naming.formatConstant($classname)}_DELETE = "$naming.formatAttribute($classname)Delete";
    /** $classname instance in context. */
    public static final String CTX_${naming.formatConstant($classname)} = "$naming.formatAttribute($classname)";
#foreach($attribute in $attributes)
#if($attribute.getParameter("inputLook") == "select")
#if($attribute.type == "reference")
#if($attribute.getParameter("omClass"))
    /** The $attribute.name option value list in context. */
    public static final String CTX_SELECT_${naming.formatConstant($attribute.name)}_OPTION_VALUES = "select${naming.getAttributeMethod($attribute.name)}OptionValues";
    /** The $attribute.name option text list in context. */
    public static final String CTX_SELECT_${naming.formatConstant($attribute.name)}_OPTION_TEXTS = "select${naming.getAttributeMethod($attribute.name)}OptionTexts";
#else
    // todo: The omClass parameter is not specified by $attribute.name reference attribute.
#end
#elseif($attribute.getParameter("selectOptionSource") == "dinamical")
    /** The $attribute.name option value list in context. */
    public static final String CTX_SELECT_${naming.formatConstant($attribute.name)}_OPTION_VALUES = "select${naming.getAttributeMethod($attribute.name)}OptionValues";
    /** The $attribute.name option text list in context. */
    public static final String CTX_SELECT_${naming.formatConstant($attribute.name)}_OPTION_TEXTS = "select${naming.getAttributeMethod($attribute.name)}OptionTexts";
#end
#end
#end
    /** Array of labels. These labels will be put into the context by calling the <code>addLabels(...)</code> method. */
    protected static final String[] LABELS = new String[] {
        "labelSave", "labelCancel", "labelDelete", "labelChoose", "labelActions",
        "label${classname}Properties",
        "labelYes", "labelNo",
        "errorUnableSave${classname}", "errorUnableDelete${classname}", "confirmDelete${classname}",
#foreach ($attribute in $attributes)
#foreach ($optionLabel in $attribute.getParameterValues("selectOptionLabels"))
        "$optionLabel",
#end
#end
    };

    /**
     * Control method of the VC model. This method is always called before any
     * page rendering and this method may contain application logic, forwarding,
     * redirection, etc.
     *
     * @param request HTTP request.
     * @throws Exception If any problem occured.
     */
    public void control(HttpServletRequest request) throws Exception {
        String operation = (String) request.getAttribute(PFWConstants.REQUEST_ATTR_OPERATION);
        HttpSession session = request.getSession();
        if (OPERATION_${naming.formatConstant($classname)}_SAVE.equals(operation) || OPERATION_${naming.formatConstant($classname)}_DELETE.equals(operation)) {
            Object result = request.getAttribute(PFWConstants.REQUEST_ATTR_OPERATION_RESULT);
            if (result instanceof ErrorMessage) {
                ErrorMessage errors = (ErrorMessage) result;
                if (!errors.hasAny()) {                    
                    session.removeAttribute(SESSION_ATTR_INSTANCE);

                    SofiaLink link = new SofiaLink(request);
                    HistoryHelper historyHelper = (HistoryHelper) session.getAttribute(HistoryGateway.SESSION_ATTR_HISTORY_HELPER);
                    redirect(request, historyHelper.back(link));
                }
            }
        }

    }

    /**
     * Updates ${classname} instance and puts it into the context.
     * @param context Velocity context.
     */
    protected void add${classname}Instance(VelocityContext context) {
        RequestHelper helper = (RequestHelper) context.get(CTX_HELPER);
        HttpServletRequest request = (HttpServletRequest) context.get(CTX_REQUEST);
        HttpSession session = request.getSession();
        String updateForm = request.getParameter(REQUEST_PARAM_UPDATE_FORM);
        $classname $naming.formatAttribute($classname) = null;
        if (updateForm != null && !"".equals(updateForm)) {
            $naming.formatAttribute($classname) = (${classname}) session.getAttribute(SESSION_ATTR_INSTANCE);
            if ($naming.formatAttribute($classname) == null)
                throw new IllegalStateException("Did not get '$classname' bean instance from the session.");
        } else {
            String id = getObjectId(context);
            try {
                if (id != null) {
                    $naming.formatAttribute($classname) = new $classname(id);
                } else {
                    $naming.formatAttribute($classname) = new $classname(true);
                    helper.loadBean(${classname}ListPortlet.REQUEST_PARAM_PREFIX_FILTER, $naming.formatAttribute($classname));
                }
            } catch (OMSException e) {
                log4j.error("Unable to instantiate ${classname}.", e);
            }
            session.setAttribute(SESSION_ATTR_INSTANCE, $naming.formatAttribute($classname));
        }
        Locale locale = (Locale) context.get(CTX_LOCALE);
        ${naming.formatAttribute($classname)}.setLocale(locale);
        helper.loadBean(REQUEST_PARAM_PREFIX_$naming.formatConstant($classname), ${naming.formatAttribute($classname)});
        context.put(CTX_${naming.formatConstant($classname)}, ${naming.formatAttribute($classname)});
    }

#foreach($attribute in $attributes)
#if($attribute.getParameter("inputLook") == "select")
#if($attribute.type == "reference" || $attribute.getParameter("selectOptionSource") == "dinamical")
    /**
     * This method puts the selecting helper list of ${attribute.name} attribute to the context.
     * @param context VelocityContext the destination context instance.
     */
    protected void add${naming.getAttributeMethod($attribute.name)}OptionLists(VelocityContext context) {
        List optionValueList = new ArrayList();
        List optionTextList = new ArrayList();
#if($attribute.type == "reference")
#if($attribute.getParameter("omClass"))
        OMObjectFormatter formatter = new OMObjectFormatter();
        Collection omObjects = ${attribute.getParameter("omClass")}.omClass.getOMObjects();
        for (Iterator i = omObjects.iterator(); i.hasNext();) {
            OMObject object = (OMObject) i.next();
            optionValueList.add(object.getId());
            optionTextList.add(formatter.format(object, (Locale) context.get(CTX_LOCALE)));
        }
#else

       // todo: The omClass parameter is not specified by $attribute.name reference attribute.

#end
#else

        // todo: implement this method!

#end
        context.put(CTX_SELECT_${naming.formatConstant($attribute.name)}_OPTION_VALUES, optionValueList);
        context.put(CTX_SELECT_${naming.formatConstant($attribute.name)}_OPTION_TEXTS, optionTextList);
    }

#end
#end
#end
    /**
     * View method of the VC model using velocity context. The request object is
     * avaliable from the context (key: {@link #CTX_REQUEST}).
     *
     * @param context Velocity context.
     * @throws Exception If any problem occured.
     */
    public void view(VelocityContext context) throws Exception {
        addLabels(context, LABELS);
        add${classname}Instance(context);
#foreach($attribute in $attributes)
#if($attribute.getParameter("inputLook") == "select")
#if($attribute.type == "reference")
#if($attribute.getParameter("omClass"))
        add${naming.getAttributeMethod($attribute.name)}OptionLists(context);
#else
       // todo: The omClass parameter is not specified by $attribute.name reference attribute.
#end
#elseif($attribute.getParameter("selectOptionSource") == "dinamical")
        add${naming.getAttributeMethod($attribute.name)}OptionLists(context);
#end
#end
#end
    }
}
