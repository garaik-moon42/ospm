#if ($package)
package ${package};
#end

import com.p92.sofia.pfw.operation.Operation;
import com.p92.sofia.pfw.SofiaWebApplication;
import com.p92.sofia.pfw.error.ErrorMessage;
import com.p92.sofia.oms.tool.CSVExporter;
import com.p92.sofiamodule.pm3.bean.${classname}Filter;
import com.p92.sofiamodule.pm3.bean.${classname};
import com.p92.sofiamodule.pm3.portlet.${classname}ListPortlet;
import com.arvato.common.properties.Properties;

import javax.servlet.http.HttpServletRequest;
import java.io.File;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.Date;

import org.apache.log4j.Logger;

/**
 * ${classname} list exporter operation class.
 * Generated by SOFIA code generator on ${date}.
 */
public class ${classname}ListExportOperation implements Operation{
    /** Label id of error message. */
    public static final String ERROR_UNABLE_EXPORT_$naming.formatConstant($classname)_TO_CSV = "errorUnableExport${classname}ToCSV";
    /** Logger. */
    private static Logger log4j = Logger.getLogger(${classname}ListExportOperation.class);
    /** DateFormat instance for timestamp token. */
    protected static DateFormat dateformat = new SimpleDateFormat("yyyyMMddHHmmss");;
    /** SofiaWebApplication instance. */
    protected SofiaWebApplication application;
    /** ${classname}Filter instance (from the session).*/
    protected ${classname}Filter filter;
    /** CSVExporter instance. */
    protected CSVExporter exporter;

    /**
     * Sets the operation parameteres from the request.
     *
     * @param application SOFIA Web Application instance.
     * @param properties  Properties defined in configuration file for this operation.
     * @param request     HTTP request.
     */
    public void init(SofiaWebApplication application, Properties properties, HttpServletRequest request) {
        this.application = application;
        this.filter = (${classname}Filter) request.getSession().getAttribute(${classname}ListPortlet.SESSION_ATTR_FILTER);
        this.exporter = new CSVExporter(application.getOMS(), ${classname}.omClass);
    }


    /**
     * This method proccess the output file after that is created.
     * @param output File the output.
     * @throws Exception if any error has occured.
     */
    public void postProcess(File output) throws Exception{

    }

    /**
     * Performs the operation.
     *
     * @return Result 'code' as an object. It makes possible to return any sophisticated result.
     */
    public Object perform() {
        ErrorMessage em = new ErrorMessage(application);
        try {
            // check dir if it is not exist then make.
            StringBuffer fileName = new StringBuffer(application.getUploadTempPath());
            fileName.append(File.separator);
            fileName.append(${classname}.OM_CLASS_NAME);
            File dir = new File(fileName.toString());
            if (!dir.exists()) {
                dir.mkdir();
            }

            fileName.append(File.separator);
            fileName.append(${classname}.OM_CLASS_NAME);
            fileName.append("-export-");
            fileName.append(dateformat.format(new Date()));
            fileName.append(".csv");

            File file = new File(fileName.toString());

            exporter.export(filter.getCriteria(true), file, application.getEncodingType());
            postProcess(file);
        } catch (Exception e) {
            log4j.error("Unable to export ${classname} list to CSV file.", e);
            em.addGeneral(ERROR_UNABLE_EXPORT_$naming.formatConstant($classname)_TO_CSV);
        }
        return em;
    }
}
