#if ($package)
package ${package};
#end

#import("com.arvato.common.properties.Properties" $imports)
#import("com.p92.sofia.pfw.velocity.VelocityPortlet" $imports)

#import("javax.servlet.http.HttpServletRequest" $imports)
#import("javax.servlet.http.HttpSession" $imports)
#import("javax.servlet.ServletContext" $imports)
#import("javax.servlet.ServletException" $imports)

#import("org.apache.velocity.VelocityContext" $imports)

#import("com.p92.sofia.pfw.request.RequestHelper" $imports)
#import("com.p92.sofia.pfw.SofiaWebApplication" $imports)
#import("com.p92.sofia.oms.tool.OMObjectFormatter" $imports)
import com.p92.sofia.oms.OMObject;

#import("com.p92.sofiamodule.pm3.bean.*" $imports)

#import("java.util.*" $imports)

#foreach ($import in $imports)
import ${import};
#end

/**
 * $classname list portlet class.
 * Generated by SOFIA code generator on ${date}.
 */
public class ${classname}ListPortlet extends VelocityPortlet {
    /** Filter instance in session. */
    public static final String SESSION_ATTR_FILTER = "filterOf" + ${classname}ListPortlet.class.getName();
    /** Prefix of request parameters of filter. */
    public static final String REQUEST_PARAM_PREFIX_FILTER = "filter";
    /** List of instances in context. */
    public static final String CTX_ITEMS = "items";
    /** Filter instance in context. */
    public static final String CTX_FILTER = "filter";
    /** Select mode indicator in context. */
    public static final String CTX_SELECTMODE = "selectMode";
    /** Select mode property. */
    public static final String PROPERTY_SELECTMODE = "selectmode";
    /** Array of labels. These labels will be put into the context by calling the <code>addLabels(...)</code> method. */
#foreach($attribute in $attributes)
#if($attribute.getParameter("filterLook") == "select")
#if($attribute.type == "reference")
#if($attribute.getParameter("omClass"))
    /** The $attribute.name option value list in context. */
    public static final String CTX_SELECT_${naming.formatConstant($attribute.name)}_OPTION_VALUES = "select${naming.getAttributeMethod($attribute.name)}OptionValues";
    /** The $attribute.name option text list in context. */
    public static final String CTX_SELECT_${naming.formatConstant($attribute.name)}_OPTION_TEXTS = "select${naming.getAttributeMethod($attribute.name)}OptionTexts";
#else
    // todo: The omClass parameter is not specified by $attribute.name reference attribute.
#end
#elseif($attribute.getParameter("selectOptionSource") == "dinamical")
    /** The $attribute.name option value list in context. */
    public static final String CTX_SELECT_${naming.formatConstant($attribute.name)}_OPTION_VALUES = "select${naming.getAttributeMethod($attribute.name)}OptionValues";
    /** The $attribute.name option text list in context. */
    public static final String CTX_SELECT_${naming.formatConstant($attribute.name)}_OPTION_TEXTS = "select${naming.getAttributeMethod($attribute.name)}OptionTexts";
#end
#end
#end
    protected static final String[] LABELS = new String[] {
#foreach ($attribute in $attributes)
#foreach ($optionLabel in $attribute.getParameterValues("selectOptionLabels"))
        "$optionLabel",
#end
#if ($attribute.getParameter("filterable") == "yes")
#if ($attribute.getParameter("filterLook") == "textrange" || $attribute.getParameter("filterLook") == "textrange")
        "label${naming.getAttributeMethod($attribute.name)}RangeBottom",
        "label${naming.getAttributeMethod($attribute.name)}RangeTop",
#end
#end
#end
        "labelSearch", "labelSearchReset", "labelNew", "labelActions", "labelChoose", "labelEdit", "labelNew",
        "labelFirstPage", "labelPrevPage", "labelGoPage", "labelNextPage", "labelLastPage",
        "label${classname}ListCount", "label${classname}ListEmpty", "labelFiltering", "labelOperations",
        "labelYes", "labelNo",
        "labelNew${classname}"
    };
    /** Portlet display mode indicator. */
    protected boolean selectMode;

    /**
     * This method is called after the given implementation has been instanced.
     *
     * @param id             Identifier of the given VC element.
     * @param properties     Properties set for the given implementation.
     * @param servletContext Web application context.
     * @param application    SOFIA web application instance.
     * @throws javax.servlet.ServletException If any problem occured during initalization.
     */
    public void init(String id, Properties properties, ServletContext servletContext, SofiaWebApplication application) throws ServletException {
        super.init(id, properties, servletContext, application);
        // ToDo move to module init.
        ${classname}.init(application);
        ${classname}Filter.init(application);
        selectMode = properties.getBoolean(PROPERTY_SELECTMODE);
    }

    /**
     * Control method of the VC model. This method is always called before any
     * page rendering and this method may contain application logic, forwarding,
     * redirection, etc.
     *
     * @param request HTTP request.
     * @throws Exception If any problem occured.
     */
    public void control(HttpServletRequest request) throws Exception {
    }

    /**
     * Updates and gives back the current filter instance.
     * If it does not exist yet then creates a new one and puts it into the session as an attribute.
     * @param context Velocity context.
     * @return ${classname}Filter instance.
     */
    protected ${classname}Filter getFilter(VelocityContext context) {
        HttpServletRequest request = (HttpServletRequest) context.get(CTX_REQUEST);
        HttpSession session = request.getSession();
        Locale locale = (Locale) context.get(CTX_LOCALE);
        ${classname}Filter filter = (${classname}Filter) session.getAttribute(SESSION_ATTR_FILTER);
        if (filter == null) {
            filter = new ${classname}Filter();
            session.setAttribute(SESSION_ATTR_FILTER, filter);
        }
        filter.setLocale(locale);
        RequestHelper helper = (RequestHelper) context.get(CTX_HELPER);
        helper.loadBean(REQUEST_PARAM_PREFIX_FILTER, filter);
        return filter;
    }

    /**
     * Adds the list of instances of $classname according to the current filtering criterias to the context.
     * @param context Velocity context.
     */
    protected void addInstances(VelocityContext context) {
        ${classname}Filter filter = getFilter(context);
        Locale locale = (Locale) context.get(CTX_LOCALE);
        filter.setLocale(locale);
        context.put(CTX_ITEMS, filter.getItems());
        context.put(CTX_FILTER, filter);
    }

#foreach($attribute in $attributes)
#if($attribute.getParameter("filterLook") == "select")
#if($attribute.type == "reference" || $attribute.getParameter("selectOptionSource") == "dinamical")
    /**
     * This method puts the selecting helper list of ${attribute.name} attribute to the context.
     * @param context VelocityContext the destination context instance.
     */
    protected void add${naming.getAttributeMethod($attribute.name)}OptionLists(VelocityContext context) {
        List optionValueList = new ArrayList();
        List optionTextList = new ArrayList();
#if($attribute.type == "reference")
#if($attribute.getParameter("omClass"))
        OMObjectFormatter formatter = new OMObjectFormatter();
        Collection omObjects = ${attribute.getParameter("omClass")}.omClass.getOMObjects();
        for (Iterator i = omObjects.iterator(); i.hasNext();) {
            OMObject object = (OMObject) i.next();
            optionValueList.add(object.getId());
            optionTextList.add(formatter.format(object, (Locale) context.get(CTX_LOCALE)));
        }
#else

       // todo: The omClass parameter is not specified by $attribute.name reference attribute.

#end
#else

        // todo: implement this method!

#end
        context.put(CTX_SELECT_${naming.formatConstant($attribute.name)}_OPTION_VALUES, optionValueList);
        context.put(CTX_SELECT_${naming.formatConstant($attribute.name)}_OPTION_TEXTS, optionTextList);
    }

#end
#end
#end

    /**
     * View method of the VC model using velocity context. The request object is
     * avaliable from the context (key: {@link #CTX_REQUEST}).
     *
     * @param context Velocity context.
     * @throws Exception If any problem occured.
     */
    public void view(VelocityContext context) throws Exception {
        addLabels(context, LABELS);
        addInstances(context);
        context.put(CTX_SELECTMODE, new Boolean(selectMode));
#foreach($attribute in $attributes)
#if($attribute.getParameter("filterLook") == "select")
#if($attribute.type == "reference")
#if($attribute.getParameter("omClass"))
        add${naming.getAttributeMethod($attribute.name)}OptionLists(context);
#else
       // todo: The omClass parameter is not specified by $attribute.name reference attribute.
#end
#elseif($attribute.getParameter("selectOptionSource") == "dinamical")
        add${naming.getAttributeMethod($attribute.name)}OptionLists(context);
#end
#end
#end
    }
}
