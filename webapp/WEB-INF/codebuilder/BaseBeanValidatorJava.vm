#set ($dot = ".")
#set ($apos = "'")

#if ($package)
package ${package};
#end

#import("com.p92.sofia.pfw.error.ErrorMessage" $imports)
#import ("com.p92.sofia.pfw.SofiaWebApplication" $imports)
#import ("com.arvato.common.properties.Properties" $imports)

#import ("java.util.regex.Pattern" $imports)

// Generated import statements
#foreach ($import in $imports)
import ${import};
#end

/**
 *  Base validator class for ${classname} bean.
 * Generated by SOFIA code generator on ${date}.
 */
public class Base${classname}Validator {
##
## ERROR LABEL IDS.
##
#foreach ($attribute in $attributes)
#if($attribute.getParameter("editable") == "yes")
    /** label id of ${attribute.name} validation error.*/
    public static final String LABEL_${naming.formatConstant(${attribute.name})}_VALIDATION_ERROR = "error${classname}${naming.getAttributeMethod($attribute.name)}Validation";
    /** label id of ${attribute.name} requred checking error.*/
    public static final String LABEL_${naming.formatConstant(${attribute.name})}_REQUIRED_ERROR = "error${classname}${naming.getAttributeMethod($attribute.name)}IsRequired";
#end
#end

##
## STATIC REQUIRED PROPERTIES OF ATTRIBUTES
##
#foreach ($attribute in $attributes)
#if($attribute.getParameter("editable") == "yes")
    /** ${attribute.name} required property*/
    public static boolean REQUIRED_${naming.formatConstant(${attribute.name})} = $attribute.isRequired();
#end
#end

    /** SofiaWebApplication instance. */
    protected static SofiaWebApplication application;

    protected ${classname} ${naming.formatAttribute($classname)};
    protected Properties properties;

##
## STATIC INSTANCES OF ATTRIBUTE PARAMETERS ('inputMinValue', 'inputMaxValue')
##
#foreach ($attribute in $attributes)
#if($attribute.getParameter("editable") == "yes")
#if ($attribute.type == "text" || $attribute.type == "shorttext")
    /** minimal vale of ${attrinute.name}. */
    static Integer ${attribute.name}MinValue = null;
    /** maximal vale of ${attrinute.name}. */
    static Integer ${attribute.name}MaxValue = null;
    /** pattern of ${attribute.name}. */
    static Pattern ${attribute.name}Pattern = null;
#elseif ($attribute.type == "integer")
    /** minimal vale of ${attrinute.name}. */
    static Integer ${attribute.name}MinValue = null;
    /** maximal vale of ${attrinute.name}. */
    static Integer ${attribute.name}MaxValue = null;
#elseif ($attribute.type == "date" ||$attribute.type == "time" ||$attribute.type == "datetime")
    /** minimal vale of ${attrinute.name}. */
    static Date ${attribute.name}MinValue = null;
    /** maximal vale of ${attrinute.name}. */
    static Date ${attribute.name}MaxValue = null;
#elseif ($attribute.type == "float" )
    /** minimal vale of ${attrinute.name}. */
    static Float ${attribute.name}MinValue = null;
    /** maximal vale of ${attrinute.name}. */
    static Float ${attribute.name}MaxValue = null;
#end
#end
#end

##
## CONSTRUCTOR(S)
##
    /**
     * Constructor of this class.
     * @param ${naming.formatAttribute($classname)} ${classname} valdiable bean.
     * @param properties Properties for validating.
     */
    public Base${classname}Validator(${classname} ${naming.formatAttribute($classname)}, Properties properties) {
        this.${naming.formatAttribute($classname)} = ${naming.formatAttribute($classname)};
        this.properties = properties;
    }

##
## STATIC INIT METHOD
##
    /**
     * Initalizes the validator.
     * @param application Web application instance.
     */
    public static void init(SofiaWebApplication application) {
        if (Base${classname}Validator.application == null) {
            Base${classname}Validator.application = application;
            try {
#foreach ($attribute in $attributes)
#if($attribute.getParameter("editable") == "yes")
##
## GENERATES LOW LIMIT VALUES INITIALIZATION CODE IF THE ATTIBUTE SUPPORT
##
#if($attribute.getParameter("inputMinValue"))
#if ($attribute.type == "text" || $attribute.type == "shorttext" || $attribute.type == "integer")
            ${attribute.name}MinValue = new Integer(Integer.parseInt("$attribute.getParameter("inputMinValue")"));
#elseif ($attribute.type == "date")
            ${attribute.name}MinValue = application.getDateFormat(application.getDefaultLocale()).parse("$attribute.getParameter("inputMinValue")");
#elseif ($attribute.type == "time" )
            ${attribute.name}MinValue = application.getTimeFormat(application.getDefaultLocale()).parse("$attribute.getParameter("inputMinValue")");
#elseif ($attribute.type == "datetime")
            ${attribute.name}MinValue = application.getTimeFormat(application.getDefaultLocale()).parse("$attribute.getParameter("inputMinValue")");
#elseif ($attribute.type == "float" )
            ${attribute.name}MinValue = new Float(Float.parseFloat("$attribute.getParameter("inputMinValue")"));
#end
#else
#if($attribute.type == "shorttext" || $attribute.type == "text" || $attribute.type == "date" || $attribute.type == "time" || $attribute.type == "datetime" || $attribute.type == "integer" || $attribute.type == "float")
            ${attribute.name}MinValue = null;
#end
#end
##
## GENERATES HIGH LIMIT VALUES INITIALIZATION CODE IF THE ATTIBUTE SUPPORT
##
#if($attribute.getParameter("inputMaxValue"))
#if ($attribute.type == "text" || $attribute.type == "shorttext" || $attribute.type == "integer")
            ${attribute.name}MaxValue = new Integer(Integer.parseInt("$attribute.getParameter("inputMaxValue")"));
#elseif ($attribute.type == "date")
            ${attribute.name}MaxValue = application.getDateFormat(application.getDefaultLocale()).parse("$attribute.getParameter("inputMaxValue")");
#elseif ($attribute.type == "time" )
            ${attribute.name}MaxValue = application.getTimeFormat(application.getDefaultLocale()).parse("$attribute.getParameter("inputMaxValue")");
#elseif ($attribute.type == "datetime")
            ${attribute.name}MaxValue = application.getTimeFormat(application.getDefaultLocale()).parse("$attribute.getParameter("inputMaxValue")");
#elseif ($attribute.type == "float" )
            ${attribute.name}MaxValue = new Float(Float.parseFloat("$attribute.getParameter("inputMaxValue")"));
#end
#else
#if($attribute.type == "shorttext" || $attribute.type == "text" || $attribute.type == "date" || $attribute.type == "time" || $attribute.type == "datetime" || $attribute.type == "integer" || $attribute.type == "float")
            ${attribute.name}MaxValue = null;
#end
#end
##
## GENERATES REGEX PATTERN INITIALIZATION CODE IF THE ATTIBUTE SUPPORT
##
#if($attribute.getParameter("inputPattern"))
#if ($attribute.type == "text" || $attribute.type == "shorttext")
            ${attribute.name}Pattern = Pattern.compile("$attribute.getParameter("inputPattern")");
#end
#else
#if ($attribute.type == "text" || $attribute.type == "shorttext")
            ${attribute.name}Pattern = null;
#end
#end

#end
#end
            } catch (Exception e) {
                throw new RuntimeException("Error has occured until Base${classname}Validator initializing.", e);
            }
        }
    }

##
## CLASS VALIDATOR METHOD (VALIDATE ALL ATTRIBUTES)
##
    /**
     * Validates all attribute of ${classname} bean
     * @return ErrorMessage object.
     */
    public ErrorMessage validate(ErrorMessage em) {
##
## REGISTRATES ATTRIBUTE VALIDATOR METHODS
##
#foreach ($attribute in $attributes)
#if($attribute.getParameter("editable") == "yes")
#if ($attribute.type == "integer" || $attribute.type == "float" || $attribute.type == "boolean" || $attribute.type == "date" || $attribute.type == "datetime" || $attribute.type == "time" || $attribute.type == "shorttext" || $attribute.type == "text"|| $attribute.type == "reference")
        validate${naming.getAttributeMethod($attribute.name)}(em);

#end
#end
#end

        return em;
    }

##
## ATTRIBUTE VALIDATOR
##
#foreach ($attribute in $attributes)
#if($attribute.getParameter("editable") == "yes")
#if ($attribute.type == "integer" || $attribute.type == "float" || $attribute.type == "boolean" || $attribute.type == "date" || $attribute.type == "datetime" || $attribute.type == "time" || $attribute.type == "shorttext" || $attribute.type == "text" || $attribute.type == "reference")

##
## COMMONS OF ATTRIBUTE VALIDATOR
##
    /**
     * Validates ${attribute.name} attribute. If any problem comes up then adds error to the ErrorMessage instance.
     * @param em Errormessage instance.
     */
    protected void validate${naming.getAttributeMethod($attribute.name)}(ErrorMessage em) {
        // Is joined any error for the attribute.
        if (em.hasAttribute("${naming.formatAttribute($classname)}${naming.getAttributeMethod($attribute.name)}")) {
            em.addAttribute("${naming.formatAttribute($classname)}${naming.getAttributeMethod($attribute.name)}", LABEL_${naming.formatConstant(${attribute.name})}_VALIDATION_ERROR);
            return;
        }
        // Check the attribute is required.
        if (${naming.formatAttribute($classname)}.get${naming.getAttributeMethod($attribute.name)}() == null && REQUIRED_${naming.formatConstant(${attribute.name})}) {
            em.addAttribute("${naming.formatAttribute($classname)}${naming.getAttributeMethod($attribute.name)}", LABEL_${naming.formatConstant(${attribute.name})}_REQUIRED_ERROR);
            return;
        }
##
## CODE OF 'LIMIT VALUE SUPPORTER' ATTRIBUTES
##
#if($attribute.type == "shorttext" || $attribute.type == "text" || $attribute.type == "date" || $attribute.type == "time" || $attribute.type == "datetime" || $attribute.type == "integer" || $attribute.type == "float")
        // If attribute has a limit value (min or max), attribute value is not able null.
        if ((${attribute.name}MinValue != null || ${attribute.name}MaxValue != null ) && ${naming.formatAttribute($classname)}${dot}get${naming.getAttributeMethod($attribute.name)}() == null) {
            em.addAttribute("${naming.formatAttribute($classname)}${naming.getAttributeMethod($attribute.name)}", LABEL_${naming.formatConstant(${attribute.name})}_VALIDATION_ERROR);
            return;
        }
#end
##
## 'TEXT' OR 'SHORTTEXT' VALIDATOR
##
#if ($attribute.type == "shorttext" || $attribute.type == "text")
        // Low limit value cheching.
        if (${attribute.name}MinValue != null && ${naming.formatAttribute($classname)}${dot}get${naming.getAttributeMethod($attribute.name)}() != null && ${attribute.name}MinValue${dot}intValue() > ${naming.formatAttribute($classname)}${dot}get${naming.getAttributeMethod($attribute.name)}().length()) {
            em.addAttribute("${naming.formatAttribute($classname)}${naming.getAttributeMethod($attribute.name)}", LABEL_${naming.formatConstant(${attribute.name})}_VALIDATION_ERROR);
            return;
        }
        // High limit value checking.
        if (${attribute.name}MaxValue != null && ${naming.formatAttribute($classname)}${dot}get${naming.getAttributeMethod($attribute.name)}() != null && ${attribute.name}MaxValue${dot}intValue() < ${naming.formatAttribute($classname)}${dot}get${naming.getAttributeMethod($attribute.name)}().length()) {
            em.addAttribute("${naming.formatAttribute($classname)}${naming.getAttributeMethod($attribute.name)}", LABEL_${naming.formatConstant(${attribute.name})}_VALIDATION_ERROR);
            return;
        }
        // Pattern matching.
        if (${attribute.name}Pattern != null && ${naming.formatAttribute($classname)}${dot}get${naming.getAttributeMethod($attribute.name)}() != null && !${attribute.name}Pattern.matcher(${naming.formatAttribute($classname)}${dot}get${naming.getAttributeMethod($attribute.name)}()).matches()) {
            em.addAttribute("${naming.formatAttribute($classname)}${naming.getAttributeMethod($attribute.name)}", LABEL_${naming.formatConstant(${attribute.name})}_VALIDATION_ERROR);
            return;
        }
##
## 'DATE', 'TIME', 'DATETIME' VALIDATOR
##
#elseif ($attribute.type == "date" || $attribute.type == "time" || $attribute.type == "datetime")
        // Low limit value cheching.
        if (${attribute.name}MinValue != null && ${attribute.name}MinValue.after(${naming.formatAttribute($classname)}${dot}get${naming.getAttributeMethod($attribute.name)}())) {
            em.addAttribute("${naming.formatAttribute($classname)}${naming.getAttributeMethod($attribute.name)}", LABEL_${naming.formatConstant(${attribute.name})}_VALIDATION_ERROR);
            return;
        }
        // High limit value checking.
        if (${attribute.name}MaxValue != null && ${attribute.name}MaxValue.before(${naming.formatAttribute($classname)}${dot}get${naming.getAttributeMethod($attribute.name)}())) {
            em.addAttribute("${naming.formatAttribute($classname)}${naming.getAttributeMethod($attribute.name)}", LABEL_${naming.formatConstant(${attribute.name})}_VALIDATION_ERROR);
            return;
        }
##
## 'INTEGER' VALIDATOR
##
#elseif ($attribute.type == "integer")
        // Low limit value cheching.
        if (${attribute.name}MinValue != null && ${naming.formatAttribute($classname)}${dot}get${naming.getAttributeMethod($attribute.name)}() != null && ${attribute.name}MinValue${dot}intValue() > ${naming.formatAttribute($classname)}${dot}get${naming.getAttributeMethod($attribute.name)}().intValue()) {
            em.addAttribute("${naming.formatAttribute($classname)}${naming.getAttributeMethod($attribute.name)}", LABEL_${naming.formatConstant(${attribute.name})}_VALIDATION_ERROR);
            return;
        }
        // High limit value checking.
        if (${attribute.name}MaxValue != null && ${naming.formatAttribute($classname)}${dot}get${naming.getAttributeMethod($attribute.name)}() != null && ${attribute.name}MaxValue${dot}intValue() < ${naming.formatAttribute($classname)}${dot}get${naming.getAttributeMethod($attribute.name)}().intValue()) {
            em.addAttribute("${naming.formatAttribute($classname)}${naming.getAttributeMethod($attribute.name)}", LABEL_${naming.formatConstant(${attribute.name})}_VALIDATION_ERROR);
            return;
        }
##
## 'FLOAT' VALIDATOR
##
#elseif ($attribute.type == "float")
        // Low limit value cheching.
        if (${attribute.name}MinValue != null && ${naming.formatAttribute($classname)}${dot}get${naming.getAttributeMethod($attribute.name)}() != null && ${attribute.name}MinValue${dot}floatValue() > ${naming.formatAttribute($classname)}${dot}get${naming.getAttributeMethod($attribute.name)}().floatValue()) {
            em.addAttribute("${naming.formatAttribute($classname)}${naming.getAttributeMethod($attribute.name)}", LABEL_${naming.formatConstant(${attribute.name})}_VALIDATION_ERROR);
            return;
        }
        // High limit value checking.
        if (${attribute.name}MaxValue != null && ${naming.formatAttribute($classname)}${dot}get${naming.getAttributeMethod($attribute.name)}() != null && ${attribute.name}MaxValue${dot}floatValue() < ${naming.formatAttribute($classname)}${dot}get${naming.getAttributeMethod($attribute.name)}().floatValue()) {
            em.addAttribute("${naming.formatAttribute($classname)}${naming.getAttributeMethod($attribute.name)}", LABEL_${naming.formatConstant(${attribute.name})}_VALIDATION_ERROR);
            return;
        }
##
## 'BOOLEAN' VALIDATOR
##
#elseif ($attribute.type == "boolean")
        // boolean validator.
##
## NOT SUPPORTED VALIDATORS
##
#else
        //  The $attribute.type type has not generated validator yet.
#end
    }
#end
#end
#end
}
